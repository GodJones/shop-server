<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>shop-server</artifactId>
    <groupId>com.onlythinking.shop</groupId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>shop-server-mgt</artifactId>

  <profiles>
    <profile>
      <id>dev</id>
      <properties>
        <spring.profiles.active>dev</spring.profiles.active>
      </properties>
    </profile>
    <profile>
      <id>test</id>
      <build>
        <finalName>${project.artifactId}-test</finalName>
      </build>
    </profile>
    <profile>
      <id>apiDocs</id>
      <properties>
        <spring.profiles.active>apiDocs</spring.profiles.active>
        <rspec-core.version>2.6.0</rspec-core.version>
        <gems.base>${project.basedir}/install</gems.base>
        <skipTests>false</skipTests>
      </properties>
      <dependencies>
        <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-swagger-ui</artifactId>
          <version>${springfox-swagger-ui.version}</version>
        </dependency>
        <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-spring-web</artifactId>
          <version>${springfox.version}</version>
        </dependency>
        <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-swagger2</artifactId>
          <version>${springfox.version}</version>
          <exclusions>
            <exclusion>
              <artifactId>mapstruct</artifactId>
              <groupId>org.mapstruct</groupId>
            </exclusion>
          </exclusions>
        </dependency>
        <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-bean-validators</artifactId>
          <version>${springfox.version}</version>
        </dependency>
        <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-staticdocs</artifactId>
          <version>2.6.1</version>
        </dependency>
        <dependency>
          <groupId>io.github.robwin</groupId>
          <artifactId>assertj-swagger</artifactId>
          <version>0.2.0</version>
          <exclusions>
            <exclusion>
              <groupId>org.apache.commons</groupId>
              <artifactId>commons-lang3</artifactId>
            </exclusion>
          </exclusions>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>io.github.swagger2markup</groupId>
          <artifactId>swagger2markup-spring-restdocs-ext</artifactId>
          <version>${swagger2markup.version}</version>
          <exclusions>
            <exclusion>
              <groupId>org.apache.commons</groupId>
              <artifactId>commons-lang3</artifactId>
            </exclusion>
          </exclusions>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.springframework.restdocs</groupId>
          <artifactId>spring-restdocs-mockmvc</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-swagger-ui</artifactId>
          <version>${springfox-swagger-ui.version}</version>
        </dependency>
        <dependency>
          <groupId>io.springfox</groupId>
          <artifactId>springfox-data-rest</artifactId>
          <version>${springfox.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework.restdocs</groupId>
          <artifactId>spring-restdocs-asciidoctor</artifactId>
          <version>${restdocs.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-test</artifactId>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>rubygems</groupId>
          <artifactId>asciidoctor-pdf-cjk</artifactId>
          <version>${pdf.cjk.version}</version>
          <type>gem</type>
          <!-- avoid downloading gems included in AsciidoctorJ -->
          <scope>provided</scope>
          <exclusions>
            <exclusion>
              <groupId>rubygems</groupId>
              <artifactId>asciidoctor</artifactId>
            </exclusion>
            <exclusion>
              <groupId>rubygems</groupId>
              <artifactId>asciidoctor-pdf</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <dependency>
          <groupId>rubygems</groupId>
          <artifactId>asciidoctor-pdf-cjk-kai_gen_gothic</artifactId>
          <version>${pdf.cjk.kaigen.version}</version>
          <type>gem</type>
          <scope>provided</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <io.swagger.ext.outputDir>${generated.asciidoc.directory}</io.swagger.ext.outputDir>
                <io.springfox.staticdocs.outputDir>${swagger.output.dir}</io.springfox.staticdocs.outputDir>
                <io.springfox.staticdocs.snippetsOutputDir>${swagger.snippetOutput.dir}
                </io.springfox.staticdocs.snippetsOutputDir>
              </systemPropertyVariables>
            </configuration>
          </plugin>

          <plugin>
            <groupId>de.saumya.mojo</groupId>
            <artifactId>gem-maven-plugin</artifactId>
            <version>${gem-maven-plugin.version}</version>
            <configuration>
              <skip>true</skip>
              <!-- Align JRuby version with AsciidoctorJ to avoid redundant downloading -->
              <jrubyVersion>${jruby.version}</jrubyVersion>
              <gemHome>${gems.base}/gems</gemHome>
              <gemPath>${project.basedir}/install/gems</gemPath>
            </configuration>
            <executions>
              <!-- Install required gems in target directory -->
              <execution>
                <id>install-gems</id>
                <goals>
                  <goal>initialize</goal>
                </goals>
                <phase>initialize</phase>
              </execution>
              <!-- Download KaiGen Gothic fonts in target directory -->
              <execution>
                <id>install-themes</id>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>initialize</phase>
                <configuration>
                  <!-- Run post-installation script to download fonts -->
                  <execArgs>
                    ${gems.base}/gems-provided/gems/asciidoctor-pdf-cjk-kai_gen_gothic-${pdf.cjk.kaigen.version}/exe/asciidoctor-pdf-cjk-kai_gen_gothic-install
                  </execArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <!-- First, use the swagger2markup plugin to generate asciidoc -->
          <plugin>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup-maven-plugin</artifactId>
            <version>${swagger2markup.version}</version>
            <dependencies>
              <dependency>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-import-files-ext</artifactId>
                <version>${swagger2markup.version}</version>
              </dependency>
              <dependency>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-spring-restdocs-ext</artifactId>
                <version>${swagger2markup.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <swaggerInput>${swagger.input}</swaggerInput>
              <outputDir>${generated.asciidoc.directory}</outputDir>
              <config>
                <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>
                <swagger2markup.outputLanguage>ZH</swagger2markup.outputLanguage>
                <!--<swagger2markup.lineSeparator>MAC</swagger2markup.lineSeparator>-->
                <swagger2markup.basePathPrefixEnabled>false</swagger2markup.basePathPrefixEnabled>

                <swagger2markup.generatedExamplesEnabled>true</swagger2markup.generatedExamplesEnabled>
                <swagger2markup.extensions.dynamicOverview.contentPath>
                  ${project.basedir}/src/docs/asciidoc/extensions/overview
                </swagger2markup.extensions.dynamicOverview.contentPath>
                <swagger2markup.extensions.dynamicDefinitions.contentPath>
                  ${project.basedir}/src/docs/asciidoc/extensions/definitions
                </swagger2markup.extensions.dynamicDefinitions.contentPath>
                <swagger2markup.extensions.dynamicPaths.contentPath>
                  ${project.basedir}/src/docs/asciidoc/extensions/paths
                </swagger2markup.extensions.dynamicPaths.contentPath>
                <swagger2markup.extensions.dynamicSecurity.contentPath>
                  ${project.basedir}/src/docs/asciidoc/extensions/security/
                </swagger2markup.extensions.dynamicSecurity.contentPath>
                <swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}
                </swagger2markup.extensions.springRestDocs.snippetBaseUri>
                <swagger2markup.extensions.springRestDocs.defaultSnippets>true
                </swagger2markup.extensions.springRestDocs.defaultSnippets>
                <!--<swagger2markup.separatedOperationsEnabled>false</swagger2markup.separatedOperationsEnabled>-->
              </config>
            </configuration>
            <executions>
              <execution>
                <phase>test</phase>
                <goals>
                  <goal>convertSwagger2markup</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <!-- Run the generated asciidoc through Asciidoctor to generate
               other documentation types, such as PDFs or HTML5 -->
          <plugin>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctor-maven-plugin</artifactId>
            <version>${asciidoctor.maven.plugin.version}</version>
            <!-- Include Asciidoctor PDF for pdf generation -->
            <dependencies>
              <dependency>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctorj-pdf</artifactId>
                <version>${asciidoctorj.pdf.version}</version>
              </dependency>
              <dependency>
                <groupId>org.jruby</groupId>
                <artifactId>jruby-complete</artifactId>
                <version>${jruby-complete.version}</version>
              </dependency>
              <dependency>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctorj-diagram</artifactId>
                <version>${asciidoctorj.diagram.version}</version>
              </dependency>
            </dependencies>
            <!-- Configure generic document generation settings -->
            <configuration>
              <!-- The gem-maven-plugin appends the scope (e.g., provided) to the gemPath defined in the plugin configuration -->
              <gemPath>${gems.base}/gems-provided</gemPath>
              <!-- Set Ruby extensions as required gems -->
              <requires>
                <require>asciidoctor-diagram</require>
                <require>asciidoctor-pdf-cjk</require>
                <require>asciidoctor-pdf-cjk-kai_gen_gothic</require>
              </requires>
              <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
              <sourceDocumentName>index.adoc</sourceDocumentName>
              <attributes>
                <doctype>book</doctype>
                <toc>left</toc>
                <toclevels>3</toclevels>
                <numbered/>
                <hardbreaks/>
                <sectlinks/>
                <sectanchors/>
                <generated>${generated.asciidoc.directory}</generated>
                <endpoint-url>http://127.0.0.1</endpoint-url>
              </attributes>
            </configuration>
            <!-- Since each execution can only handle one backend, run
                 separate executions for each desired output type -->
            <executions>
              <execution>
                <id>output-html</id>
                <phase>test</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <backend>html5</backend>
                  <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                  <sourceHighlighter>coderay</sourceHighlighter>
                  <attributes>
                    <imagesdir>./images</imagesdir>
                    <toc>left</toc>
                    <icons>font</icons>
                    <sectanchors>true</sectanchors>
                    <!-- set the idprefix to blank -->
                    <idprefix/>
                    <idseparator>-</idseparator>
                    <docinfo1>true</docinfo1>
                  </attributes>
                </configuration>
              </execution>

              <execution>
                <id>output-pdf</id>
                <phase>test</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <backend>pdf</backend>
                  <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
                  <sourceHighlighter>coderay</sourceHighlighter>
                  <attributes>
                    <imagesdir>${asciidoctor.pdf.output.directory}/images</imagesdir>
                    <allow-uri-read/>
                    <icons>font</icons>
                    <pagenums/>
                    <toc/>
                    <idprefix/>
                    <idseparator>-</idseparator>
                    <!-- Set KaiGen Gothic Chinese theme -->
                    <pdf-style>KaiGenGothicCN</pdf-style>
                  </attributes>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!-- copy the generated documents -->
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>${maven-resources-plugin.version}</version>
            <executions>
              <execution>
                <id>copy-resources</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${asciidoctor.html.output.directory}</directory>
                    </resource>
                    <resource>
                      <directory>${asciidoctor.pdf.output.directory}</directory>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
  </profiles>

  <dependencies>

    <!--App 模块-->
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>shop-server-app</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!--quartz-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
    </dependency>
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>${quartz.version}</version>
    </dependency>
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz-jobs</artifactId>
      <version>${quartz.version}</version>
    </dependency>

    <!--Shiro-->
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-core</artifactId>
      <version>${shiro.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-spring-boot-web-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-ehcache</artifactId>
    </dependency>

    <!--server容器-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-tomcat</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-undertow</artifactId>
    </dependency>

    <!--Api文档工具-->
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>${springfox.version}</version>
      <exclusions>
        <exclusion>
          <artifactId>mapstruct</artifactId>
          <groupId>org.mapstruct</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-bean-validators</artifactId>
      <version>${springfox.version}</version>
    </dependency>
    <dependency>
      <groupId>io.github.swagger2markup</groupId>
      <artifactId>swagger2markup-import-files-ext</artifactId>
      <version>${swagger2markup.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>

    <!--test-->
    <dependency>
      <groupId>org.codehaus.janino</groupId>
      <artifactId>janino</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/main/generated</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
              <goal>build-info</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-filtering</artifactId>
            <version>1.3</version>
          </dependency>
        </dependencies>
        <configuration>
          <encoding>UTF-8</encoding>
          <!-- 过滤后缀为pem、pfx的证书文件 -->
          <nonFilteredFileExtensions>
            <nonFilteredFileExtension>pem</nonFilteredFileExtension>
            <nonFilteredFileExtension>pfx</nonFilteredFileExtension>
            <nonFilteredFileExtension>p12</nonFilteredFileExtension>
          </nonFilteredFileExtensions>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
